{{#if disclaimer}}// {{{ disclaimer }}}{{#if header}}
{{{header}}}{{/if}}{{/if}}
// @eslint-disable camelcase

import { H3Event } from "h3";{{#if typeDef.apiConfig.lookup.hasValidate}}
import { {{Name}}TypeDef } from "yuebing-model";{{/if}}

export default defineEventHandler(async (event: H3Event) => {
  return await filterErrors(event, "{{name}}.lookup", async (event: H3Event) => {{{curlyOpen}}}{{#if typeDef.apiConfig.lookup.permission.admin}}
    return await requireAdminAccountObject(event, "{{name}}.lookup", async (event: H3Event, session, account) => {{{curlyOpen}}}{{else}}{{#if typeDef.apiConfig.lookup.permission.owner}}
    return await requireAccountObject(event, "{{name}}.lookup", async (event: H3Event, session, account) => {{{curlyOpen}}}{{else}}{{#if typeDef.apiConfig.lookup.permission.session}}
    return await requireAccount(event, "{{name}}.lookup", async (event: H3Event, session) => {{{curlyOpen}}}{{/if}}{{/if}}{{/if}}
      const {{name}}Repo = {{name}}Repository();
      const id = event?.context?.params?.id;
      if (!id) throw notFound({{name}}Repo.typeDef.idFieldName());{{#if typeDef.apiConfig.lookup.hasValidate}}
      if (!(await {{Name}}TypeDef.apiConfig.lookup.validate(account, id))) {
        throw validationError({ global: ["unknown"]});
      }{{/if}}
      const {{name}}_by_id = await {{name}}Repo.safeFindById(id);
      if ({{name}}_by_id) return {{name}}_by_id;
      {{#each typeDef.alternateLookupFields}}
      const {{../name}}_by_{{this}} = await {{../name}}Repo.safeFindFirstBy("{{this}}", id);
      if ({{../name}}_by_{{this}}) return {{../name}}_by_{{this}};
      {{/each}}
      throw notFound(id);{{#if typeDef.apiConfig.lookup.permission.admin}}
    });{{else}}{{#if typeDef.apiConfig.lookup.permission.owner}}
    });{{else}}{{#if typeDef.apiConfig.lookup.permission.session}}
    });{{/if}}{{/if}}{{/if}}
  });
});
